### fonction qui calcule le nombre d'inflorescences vivantes et attractive
### avec durée de vie moyenne des inflo mesurée = 29 jours (écart-type = 14)
### avec durée d'attractivité = dA
mu <- 29
sigma <- 14
Fnorm <- cumsum(dnorm(c(1:50),mu,sigma))
I_fun <- function(fB,dA=50) {
nI <- vector(length=length(fB))
nI[1] <- fB[1]
for (t in day[-1]){
temp <- 0
for (j in 1:min(dA,t-1)) {
temp <- temp + fB[t-j]*(1-Fnorm[j])
}
nI[t] <- fB[t] + temp
}
nI
}
N = 7000
# dynamique pour 1 flush :
B1 <- round(rnorm(N,30,3))
B1 <- ifelse(B1<1,1,B1)
B1 <- B1[order(B1)]
fB_0 <- data.frame(day=unique(B1),B=as.numeric(table(B1)))
fB_0 <- merge(fB_0,data.frame(day),all=T)
fB_0[is.na(fB_0)] <- 0
fB1 <- fB_0$B
inflos_virt1 <- I_fun(fB1,50)
inflos_virt1_CDE <- I_fun(fB1,16)
# dynamique pour 2 flushs :
B2 <- round(c(rnorm(N/2,20,5),rnorm(N/2,40,5)))
B2 <- ifelse(B2<1,1,B2)
B2 <- B2[order(B2)]
fB_0 <- data.frame(day=unique(B2),B=as.numeric(table(B2)))
fB_0 <- merge(fB_0,data.frame(day),all=T)
fB_0[is.na(fB_0)] <- 0
fB2 <- fB_0$B
inflos_virt2 <- I_fun(fB2,50)
inflos_virt2_CDE <- I_fun(fB2,16)
par(mfrow=c(1,3))
plot(day,fB1, type="h",col="blue",ylab="Nombre de débourrements")
points(day,fB2, type="h",col="red")
plot(day,inflos_virt1, type="l",col="blue",ylab="Nombre d'infloresences (CDEF)")
points(day,inflos_virt2, type="l",col="red")
plot(day,inflos_virt1_CDE, type="l",col="blue",ylab="Nombre d'infloresences (CDE)")
points(day,inflos_virt2_CDE, type="l",col="red")
### dynamiques pour les 3 sous-parcelles :
### hyp: même dynamique dans les 3 sous-parcelles
inflos_virt1 <- cbind(inflos_virt1,inflos_virt1,inflos_virt1)
inflos_virt2 <- cbind(inflos_virt2,inflos_virt2,inflos_virt2)
inflos_virt1_CDE <- cbind(inflos_virt1_CDE,inflos_virt1_CDE,inflos_virt1_CDE)
inflos_virt2_CDE <- cbind(inflos_virt2_CDE,inflos_virt2_CDE,inflos_virt2_CDE)
# ATTENTION: pb si inflo = 0, fonction migration à corriger?
inflos_virt1_CDE[inflos_virt1_CDE==0] <- 1
inflos_virt2_CDE[inflos_virt2_CDE==0] <- 1
inflos_virt1[inflos_virt1==0] <- 1
inflos_virt2[inflos_virt2==0] <- 1
plot_inflos(inflos_virt1,inflos_virt2)
plot_inflos(inflos_virt1_CDE,inflos_virt2_CDE)
### Definition des paramètres du modele A:
# 1/gamma, 2/migration, 3/mu_ER, 4/mu_EH, 5/inflo_capacity, 6/stock, 7/reproduction
argA1_simul <- c(0.08, 0.494, 0.976, 0.046, 1.928, 5600, 3.084)
argA2_simul <- c(0, 0.968, 1, 0.025, 0.100, 14483, 6.26)
argA3_simul <- c(0.026, 0.093, 0.565, 0.647, 0.174, 13823, 4.818)
### Definition des paramètres du modele C:
# 1/gamma, 2/migration, 3/mu_ER, 4/mu_EH, 5/inflo_capacity, 6/stock, 7/reproduction
argC1_simul <- c(0.115, 0.189, 0.898, 0.012, 1.877, 515, 3.097)
argC2_simul <- c(0.004, 0.490, 0.990, 0.018, 0.242, 9970, 5.638)
argC3_simul <- c(0, 0.094, 0.999, 0.514, 0.181, 18214, 8.259)
### Definition des paramètres du modele D:
# 1/gamma, 2/migration, 3/mu_ER, 4/mu_EH, 5/inflo_capacity, 6/stock, 7/reproduction, 8/saisonnalite
argD1_simul <- c(0.021, 0.105, 0.938, 0.916, 1.992, 516, 6.018, 0.004)
argD2_simul <- c(0.019, 0.131, 0.999, 0.743, 0.262, 508, 6.19, 0.06)
argD3_simul <- c(0.0023, 0.288, 0.997, 0.064, 0.248, 9850, 6.16, 0.0297)
coefsim <- 0.50
### Modification des paramètres lambda et stock
argA1_simul1 <- argA1_simul2 <- argA1_simul
argA1_simul1[c(1,6)] <- argA1_simul[c(1,6)]*(1+coefsim)
argA1_simul2[c(1,6)] <- argA1_simul[c(1,6)]*(1-coefsim)
argA2_simul1 <- argA2_simul2 <- argA2_simul
argA2_simul1[c(1,6)] <- argA2_simul[c(1,6)]*(1+coefsim)
argA2_simul2[c(1,6)] <- argA2_simul[c(1,6)]*(1-coefsim)
argA3_simul1 <- argA3_simul2 <- argA3_simul
argA3_simul1[c(1,6)] <- argA3_simul[c(1,6)]*(1+coefsim)
argA3_simul2[c(1,6)] <- argA3_simul[c(1,6)]*(1-coefsim)
argC1_simul1 <- argC1_simul2 <- argC1_simul
argC1_simul1[c(1,6)] <- argC1_simul[c(1,6)]*(1+coefsim)
argC1_simul2[c(1,6)] <- argC1_simul[c(1,6)]*(1-coefsim)
argC2_simul1 <- argC2_simul2 <- argC2_simul
argC2_simul1[c(1,6)] <- argC2_simul[c(1,6)]*(1+coefsim)
argC2_simul2[c(1,6)] <- argC2_simul[c(1,6)]*(1-coefsim)
argC3_simul1 <- argC3_simul2 <- argC3_simul
argC3_simul1[c(1,6)] <- argC3_simul[c(1,6)]*(1+coefsim)
argC3_simul2[c(1,6)] <- argC3_simul[c(1,6)]*(1-coefsim)
argD1_simul1 <- argD1_simul2 <- argD1_simul
argD1_simul1[c(1,6)] <- argD1_simul[c(1,6)]*(1+coefsim)
argD1_simul2[c(1,6)] <- argD1_simul[c(1,6)]*(1-coefsim)
argD2_simul1 <- argD2_simul2 <- argD2_simul
argD2_simul1[c(1,6)] <- argD2_simul[c(1,6)]*(1+coefsim)
argD2_simul2[c(1,6)] <- argD2_simul[c(1,6)]*(1-coefsim)
argD3_simul1 <- argD3_simul2 <- argD3_simul
argD3_simul1[c(1,6)] <- argD3_simul[c(1,6)]*(1+coefsim)
argD3_simul2[c(1,6)] <- argD3_simul[c(1,6)]*(1-coefsim)
### Simulations
### avec dynamique de floraison à 1 flush
inflos_simfenv <- inflos_virt1
inflos_simfenv_CDE <- inflos_virt1_CDE
plot_sim_fenv_A(argA1_simul1, argA1_simul2, inflos_simfenv)
plot_decompo_A(argA1_simul1, inflos_simfenv)
plot_decompo_A(argA1_simul2, inflos_simfenv)
plot_sim_fenv_A(argA2_simul1, argA2_simul2, inflos_simfenv)
plot_sim_fenv_A(argA3_simul1, argA3_simul2, inflos_simfenv)
plot_sim_fenv_C(argC1_simul1, argC1_simul2, inflos_simfenv_CDE)
plot_decompo(argC1_simul1, inflos_simfenv_CDE)
plot_decompo(argC1_simul2, inflos_simfenv_CDE)
plot_sim_fenv_C(argC2_simul1, argC2_simul2, inflos_simfenv_CDE)
plot_sim_fenv_C(argC3_simul1, argC3_simul2, inflos_simfenv_CDE)
plot_sim_fenv_D(argD1_simul1, argD1_simul2, inflos_simfenv_CDE)
plot_decompo_season(argD1_simul1, inflos_simfenv_CDE)
plot_decompo_season(argD1_simul2, inflos_simfenv_CDE)
#! ATTENTION: pb car on n'obtient pas les mêmes résuats...
plot_sim_fenv_D(argD2_simul1, argD2_simul2, inflos_simfenv_CDE)
plot_sim_fenv_D(argD3_simul1, argD3_simul2, inflos_simfenv_CDE)
plot_decompo_A(argA1_simul, inflos_obs)
plot_decompo_A(argA1_simul1, inflos_obs)
plot_decompo_A(argA1_simul2, inflos_obs)
plot_decompo_season(argD1_simul, inflosCDE)
plot_decompo_season(argD1_simul1, inflosCDE)
plot_decompo_season(argD1_simul2, inflosCDE)
plot_sim_inflos_A(argA1_simul, inflos_virt1, inflos_virt2)
plot_decompo_A(argA1_simul, inflos_virt1)
plot_decompo_A(argA1_simul, inflos_virt2)
plot_sim_inflos_A(argA2_simul, inflos_virt1, inflos_virt2)
plot_sim_inflos_A(argA3_simul, inflos_virt1, inflos_virt2)
plot_sim_inflos_C(argC1_simul, inflos_virt1_CDE, inflos_virt2_CDE)
plot_decompo(argC1_simul, inflos_virt1_CDE)
plot_decompo(argC1_simul, inflos_virt2_CDE)
plot_sim_inflos_C(argC2_simul, inflos_virt1_CDE, inflos_virt2_CDE)
plot_sim_inflos_C(argC3_simul, inflos_virt1_CDE, inflos_virt2_CDE)
plot_sim_inflos_D(argD1_simul, inflos_virt1_CDE, inflos_virt2_CDE)
plot_decompo_season(argD1_simul, inflos_virt1_CDE)
plot_decompo_season(argD1_simul, inflos_virt2_CDE)
#! ATTENTION: pb car on n'obtient pas les mêmes résuats...
plot_sim_inflos_D(argD2_simul, inflos_virt1_CDE, inflos_virt2_CDE)
plot_sim_inflos_D(argD3_simul, inflos_virt1_CDE, inflos_virt2_CDE)
par(mfrow=c(1,3))
plot(day,fB1, type="h",col="blue",ylab="Nombre de débourrements")
points(day,fB2, type="h",col="red")
plot(day,inflos_virt1, type="l",col="blue",ylab="Nombre d'infloresences (CDEF)")
points(day,inflos_virt2, type="l",col="red")
plot(day,inflos_virt1_CDE, type="l",col="blue",ylab="Nombre d'infloresences (CDE)")
points(day,inflos_virt2_CDE, type="l",col="red")
plot_inflos(inflos_virt1,inflos_virt2)
plot_inflos(inflos_virt1_CDE,inflos_virt2_CDE)
par(mfrow=c(1,3))
plot(day,fB1, type="h",col="blue",ylab="Nombre de débourrements")
points(day,fB2, type="h",col="red")
plot(day,inflos_virt1, type="l",col="blue",ylab="Nombre d'infloresences (CDEF)")
points(day,inflos_virt2, type="l",col="red")
plot(day,inflos_virt1_CDE, type="l",col="blue",ylab="Nombre d'infloresences (CDE)")
points(day,inflos_virt2_CDE, type="l",col="red")
par(mfrow=c(1,3))
plot(day,fB1, type="h",col="blue",ylab="Nombre de débourrements")
points(day,fB2, type="h",col="red")
plot(day,inflos_virt1, type="l",col="blue",ylab="Nombre d'infloresences (CDEF)")
points(day,inflos_virt2, type="l",col="red")
plot(day,inflos_virt1_CDE, type="l",col="blue",ylab="Nombre d'infloresences (CDE)")
points(day,inflos_virt2_CDE, type="l",col="red")
day <- c(1:80)
### fonction qui calcule le nombre d'inflorescences vivantes et attractive
### avec durée de vie moyenne des inflo mesurée = 29 jours (écart-type = 14)
### avec durée d'attractivité = dA
mu <- 29
sigma <- 14
Fnorm <- cumsum(dnorm(c(1:50),mu,sigma))
I_fun <- function(fB,dA=50) {
nI <- vector(length=length(fB))
nI[1] <- fB[1]
for (t in day[-1]){
temp <- 0
for (j in 1:min(dA,t-1)) {
temp <- temp + fB[t-j]*(1-Fnorm[j])
}
nI[t] <- fB[t] + temp
}
nI
}
N = 7000
# dynamique pour 1 flush :
B1 <- round(rnorm(N,30,3))
B1 <- ifelse(B1<1,1,B1)
B1 <- B1[order(B1)]
fB_0 <- data.frame(day=unique(B1),B=as.numeric(table(B1)))
fB_0 <- merge(fB_0,data.frame(day),all=T)
fB_0[is.na(fB_0)] <- 0
fB1 <- fB_0$B
inflos_virt1 <- I_fun(fB1,50)
inflos_virt1_CDE <- I_fun(fB1,16)
# dynamique pour 2 flushs :
B2 <- round(c(rnorm(N/2,20,5),rnorm(N/2,40,5)))
B2 <- ifelse(B2<1,1,B2)
B2 <- B2[order(B2)]
fB_0 <- data.frame(day=unique(B2),B=as.numeric(table(B2)))
fB_0 <- merge(fB_0,data.frame(day),all=T)
fB_0[is.na(fB_0)] <- 0
fB2 <- fB_0$B
inflos_virt2 <- I_fun(fB2,50)
inflos_virt2_CDE <- I_fun(fB2,16)
par(mfrow=c(1,3))
plot(day,fB1, type="h",col="blue",ylab="Nombre de débourrements")
points(day,fB2, type="h",col="red")
plot(day,inflos_virt1, type="l",col="blue",ylab="Nombre d'infloresences (CDEF)")
points(day,inflos_virt2, type="l",col="red")
plot(day,inflos_virt1_CDE, type="l",col="blue",ylab="Nombre d'infloresences (CDE)")
points(day,inflos_virt2_CDE, type="l",col="red")
### dynamiques pour les 3 sous-parcelles :
### hyp: même dynamique dans les 3 sous-parcelles
inflos_virt1 <- cbind(inflos_virt1,inflos_virt1,inflos_virt1)
inflos_virt2 <- cbind(inflos_virt2,inflos_virt2,inflos_virt2)
inflos_virt1_CDE <- cbind(inflos_virt1_CDE,inflos_virt1_CDE,inflos_virt1_CDE)
inflos_virt2_CDE <- cbind(inflos_virt2_CDE,inflos_virt2_CDE,inflos_virt2_CDE)
# ATTENTION: pb si inflo = 0, fonction migration à corriger?
inflos_virt1_CDE[inflos_virt1_CDE==0] <- 1
inflos_virt2_CDE[inflos_virt2_CDE==0] <- 1
inflos_virt1[inflos_virt1==0] <- 1
inflos_virt2[inflos_virt2==0] <- 1
plot_inflos(inflos_virt1,inflos_virt2)
plot_inflos(inflos_virt1_CDE,inflos_virt2_CDE)
### Definition des paramètres du modele A:
# 1/gamma, 2/migration, 3/mu_ER, 4/mu_EH, 5/inflo_capacity, 6/stock, 7/reproduction
argA1_simul <- c(0.08, 0.494, 0.976, 0.046, 1.928, 5600, 3.084)
argA2_simul <- c(0, 0.968, 1, 0.025, 0.100, 14483, 6.26)
argA3_simul <- c(0.026, 0.093, 0.565, 0.647, 0.174, 13823, 4.818)
### Definition des paramètres du modele C:
# 1/gamma, 2/migration, 3/mu_ER, 4/mu_EH, 5/inflo_capacity, 6/stock, 7/reproduction
argC1_simul <- c(0.115, 0.189, 0.898, 0.012, 1.877, 515, 3.097)
argC2_simul <- c(0.004, 0.490, 0.990, 0.018, 0.242, 9970, 5.638)
argC3_simul <- c(0, 0.094, 0.999, 0.514, 0.181, 18214, 8.259)
### Definition des paramètres du modele D:
# 1/gamma, 2/migration, 3/mu_ER, 4/mu_EH, 5/inflo_capacity, 6/stock, 7/reproduction, 8/saisonnalite
argD1_simul <- c(0.021, 0.105, 0.938, 0.916, 1.992, 516, 6.018, 0.004)
argD2_simul <- c(0.019, 0.131, 0.999, 0.743, 0.262, 508, 6.19, 0.06)
argD3_simul <- c(0.0023, 0.288, 0.997, 0.064, 0.248, 9850, 6.16, 0.0297)
coefsim <- 0.50
### Modification des paramètres lambda et stock
argA1_simul1 <- argA1_simul2 <- argA1_simul
argA1_simul1[c(1,6)] <- argA1_simul[c(1,6)]*(1+coefsim)
argA1_simul2[c(1,6)] <- argA1_simul[c(1,6)]*(1-coefsim)
argA2_simul1 <- argA2_simul2 <- argA2_simul
argA2_simul1[c(1,6)] <- argA2_simul[c(1,6)]*(1+coefsim)
argA2_simul2[c(1,6)] <- argA2_simul[c(1,6)]*(1-coefsim)
argA3_simul1 <- argA3_simul2 <- argA3_simul
argA3_simul1[c(1,6)] <- argA3_simul[c(1,6)]*(1+coefsim)
argA3_simul2[c(1,6)] <- argA3_simul[c(1,6)]*(1-coefsim)
argC1_simul1 <- argC1_simul2 <- argC1_simul
argC1_simul1[c(1,6)] <- argC1_simul[c(1,6)]*(1+coefsim)
argC1_simul2[c(1,6)] <- argC1_simul[c(1,6)]*(1-coefsim)
argC2_simul1 <- argC2_simul2 <- argC2_simul
argC2_simul1[c(1,6)] <- argC2_simul[c(1,6)]*(1+coefsim)
argC2_simul2[c(1,6)] <- argC2_simul[c(1,6)]*(1-coefsim)
argC3_simul1 <- argC3_simul2 <- argC3_simul
argC3_simul1[c(1,6)] <- argC3_simul[c(1,6)]*(1+coefsim)
argC3_simul2[c(1,6)] <- argC3_simul[c(1,6)]*(1-coefsim)
argD1_simul1 <- argD1_simul2 <- argD1_simul
argD1_simul1[c(1,6)] <- argD1_simul[c(1,6)]*(1+coefsim)
argD1_simul2[c(1,6)] <- argD1_simul[c(1,6)]*(1-coefsim)
argD2_simul1 <- argD2_simul2 <- argD2_simul
argD2_simul1[c(1,6)] <- argD2_simul[c(1,6)]*(1+coefsim)
argD2_simul2[c(1,6)] <- argD2_simul[c(1,6)]*(1-coefsim)
argD3_simul1 <- argD3_simul2 <- argD3_simul
argD3_simul1[c(1,6)] <- argD3_simul[c(1,6)]*(1+coefsim)
argD3_simul2[c(1,6)] <- argD3_simul[c(1,6)]*(1-coefsim)
### Simulations
### avec dynamique de floraison à 1 flush
inflos_simfenv <- inflos_virt1
inflos_simfenv_CDE <- inflos_virt1_CDE
plot_sim_fenv_A(argA1_simul1, argA1_simul2, inflos_simfenv)
plot_decompo_A(argA1_simul1, inflos_simfenv)
plot_decompo_A(argA1_simul2, inflos_simfenv)
plot_decompo_A(argA1_simul2, inflos_simfenv)
plot_sim_fenv_A(argA2_simul1, argA2_simul2, inflos_simfenv)
plot_sim_fenv_A(argA3_simul1, argA3_simul2, inflos_simfenv)
plot_sim_fenv_C(argC1_simul1, argC1_simul2, inflos_simfenv_CDE)
plot_decompo(argC1_simul1, inflos_simfenv_CDE)
plot_decompo(argC1_simul2, inflos_simfenv_CDE)
plot_sim_fenv_C(argC2_simul1, argC2_simul2, inflos_simfenv_CDE)
plot_sim_fenv_C(argC3_simul1, argC3_simul2, inflos_simfenv_CDE)
plot_sim_fenv_D(argD1_simul1, argD1_simul2, inflos_simfenv_CDE)
plot_decompo_season(argD1_simul1, inflos_simfenv_CDE)
plot_decompo_season(argD1_simul2, inflos_simfenv_CDE)
plot_decompo_season(argD1_simul1, inflos_simfenv_CDE)
plot_decompo_season(argD1_simul2, inflos_simfenv_CDE)
#! ATTENTION: pb car on n'obtient pas les mêmes résuats...
plot_sim_fenv_D(argD2_simul1, argD2_simul2, inflos_simfenv_CDE)
plot_sim_fenv_D(argD3_simul1, argD3_simul2, inflos_simfenv_CDE)
plot_decompo_A(argA1_simul, inflos_obs)
plot_decompo_A(argA1_simul1, inflos_obs)
plot_decompo_A(argA1_simul2, inflos_obs)
plot_decompo_season(argD1_simul, inflosCDE)
plot_decompo_season(argD1_simul1, inflosCDE)
plot_decompo_season(argD1_simul2, inflosCDE)
plot_sim_inflos_A(argA1_simul, inflos_virt1, inflos_virt2)
plot_decompo_A(argA1_simul, inflos_virt1)
plot_decompo_A(argA1_simul, inflos_virt2)
plot_sim_inflos_A(argA2_simul, inflos_virt1, inflos_virt2)
plot_sim_inflos_A(argA3_simul, inflos_virt1, inflos_virt2)
plot_sim_inflos_C(argC1_simul, inflos_virt1_CDE, inflos_virt2_CDE)
plot_decompo(argC1_simul, inflos_virt1_CDE)
plot_decompo(argC1_simul, inflos_virt2_CDE)
plot_sim_inflos_C(argC2_simul, inflos_virt1_CDE, inflos_virt2_CDE)
plot_sim_inflos_C(argC3_simul, inflos_virt1_CDE, inflos_virt2_CDE)
plot_sim_inflos_D(argD1_simul, inflos_virt1_CDE, inflos_virt2_CDE)
plot_decompo_season(argD1_simul, inflos_virt1_CDE)
plot_decompo_season(argD1_simul, inflos_virt2_CDE)
#! ATTENTION: pb car on n'obtient pas les mêmes résuats...
plot_sim_inflos_D(argD2_simul, inflos_virt1_CDE, inflos_virt2_CDE)
plot_sim_inflos_D(argD3_simul, inflos_virt1_CDE, inflos_virt2_CDE)
# dynamique pour 2 flushs :
B2 <- round(c(rnorm(N/2,20,5),rnorm(N/2,40,5)))
B2 <- ifelse(B2<1,1,B2)
B2 <- B2[order(B2)]
fB_0 <- data.frame(day=unique(B2),B=as.numeric(table(B2)))
fB_0 <- merge(fB_0,data.frame(day),all=T)
fB_0[is.na(fB_0)] <- 0
fB2 <- fB_0$B
inflos_virt2 <- I_fun(fB2,50)
inflos_virt2_CDE <- I_fun(fB2,16)
plot(inflos_virt2_CDE)
inflos_virt2_CDE
fB2
fB2 %>% plot
# dynamique pour 2 flushs :
# B2 <- round(c(rnorm(N/2,20,5),rnorm(N/2,40,5)))
B2 <- round(c(rnorm(N/2,20,5),rnorm(N/2,60,5)))
B2 <- ifelse(B2<1,1,B2)
B2 <- B2[order(B2)]
fB_0 <- data.frame(day=unique(B2),B=as.numeric(table(B2)))
fB_0 <- merge(fB_0,data.frame(day),all=T)
fB_0[is.na(fB_0)] <- 0
fB2 <- fB_0$B
inflos_virt2 <- I_fun(fB2,50)
inflos_virt2_CDE <- I_fun(fB2,16)
par(mfrow=c(1,3))
plot(day,fB1, type="h",col="blue",ylab="Nombre de débourrements")
points(day,fB2, type="h",col="red")
plot(day,inflos_virt1, type="l",col="blue",ylab="Nombre d'infloresences (CDEF)")
points(day,inflos_virt2, type="l",col="red")
plot(day,inflos_virt1_CDE, type="l",col="blue",ylab="Nombre d'infloresences (CDE)")
points(day,inflos_virt2_CDE, type="l",col="red")
rm(list = ls())
day <- c(1:80)
### fonction qui calcule le nombre d'inflorescences vivantes et attractive
### avec durée de vie moyenne des inflo mesurée = 29 jours (écart-type = 14)
### avec durée d'attractivité = dA
mu <- 29
sigma <- 14
Fnorm <- cumsum(dnorm(c(1:50),mu,sigma))
I_fun <- function(fB,dA=50) {
nI <- vector(length=length(fB))
nI[1] <- fB[1]
for (t in day[-1]){
temp <- 0
for (j in 1:min(dA,t-1)) {
temp <- temp + fB[t-j]*(1-Fnorm[j])
}
nI[t] <- fB[t] + temp
}
nI
}
### création des dynamiques virtuelles
# B = vecteur des dates de débourrement des inflorescences
# fB = vecteur du nombre d'inflo ayant débourré des jours 1 à 80
# inflos_virt = vecteur du nombre d'inflor vivantes et attractives des jours 1 à 80
# N = nombre de débourrements (pour EH avec modèle FredB N = 7269)
N = 7000
# dynamique pour 1 flush :
B1 <- round(rnorm(N,30,3))
B1 <- ifelse(B1<1,1,B1)
B1 <- B1[order(B1)]
fB_0 <- data.frame(day=unique(B1),B=as.numeric(table(B1)))
fB_0 <- merge(fB_0,data.frame(day),all=T)
fB_0[is.na(fB_0)] <- 0
fB1 <- fB_0$B
inflos_virt1 <- I_fun(fB1,50)
inflos_virt1_CDE <- I_fun(fB1,16)
# dynamique pour 2 flushs :
# B2 <- round(c(rnorm(N/2,20,5),rnorm(N/2,40,5)))
B2 <- round(c(rnorm(N/2,20,5),rnorm(N/2,60,5)))
B2 <- ifelse(B2<1,1,B2)
B2 <- B2[order(B2)]
fB_0 <- data.frame(day=unique(B2),B=as.numeric(table(B2)))
fB_0 <- merge(fB_0,data.frame(day),all=T)
fB_0[is.na(fB_0)] <- 0
fB2 <- fB_0$B
inflos_virt2 <- I_fun(fB2,50)
inflos_virt2_CDE <- I_fun(fB2,16)
### plot des dynamiques d'inflorescences virtuelles :
par(mfrow=c(1,3))
plot(day,fB1, type="h",col="blue",ylab="Nombre de débourrements")
points(day,fB2, type="h",col="red")
plot(day,inflos_virt1, type="l",col="blue",ylab="Nombre d'infloresences (CDEF)")
points(day,inflos_virt2, type="l",col="red")
plot(day,inflos_virt1_CDE, type="l",col="blue",ylab="Nombre d'infloresences (CDE)")
points(day,inflos_virt2_CDE, type="l",col="red")
day <- c(1:80)
### fonction qui calcule le nombre d'inflorescences vivantes et attractive
### avec durée de vie moyenne des inflo mesurée = 29 jours (écart-type = 14)
### avec durée d'attractivité = dA
mu <- 29
sigma <- 14
Fnorm <- cumsum(dnorm(c(1:50),mu,sigma))
I_fun <- function(fB,dA=50) {
nI <- vector(length=length(fB))
nI[1] <- fB[1]
for (t in day[-1]){
temp <- 0
for (j in 1:min(dA,t-1)) {
temp <- temp + fB[t-j]*(1-Fnorm[j])
}
nI[t] <- fB[t] + temp
}
nI
}
### création des dynamiques virtuelles
# B = vecteur des dates de débourrement des inflorescences
# fB = vecteur du nombre d'inflo ayant débourré des jours 1 à 80
# inflos_virt = vecteur du nombre d'inflor vivantes et attractives des jours 1 à 80
# N = nombre de débourrements (pour EH avec modèle FredB N = 7269)
N = 7000
# dynamique pour 1 flush :
B1 <- round(rnorm(N,30,3))
B1 <- ifelse(B1<1,1,B1)
B1 <- B1[order(B1)]
fB_0 <- data.frame(day=unique(B1),B=as.numeric(table(B1)))
fB_0 <- merge(fB_0,data.frame(day),all=T)
fB_0[is.na(fB_0)] <- 0
fB1 <- fB_0$B
inflos_virt1 <- I_fun(fB1,50)
inflos_virt1_CDE <- I_fun(fB1,16)
# dynamique pour 2 flushs :
# B2 <- round(c(rnorm(N/2,20,5),rnorm(N/2,40,5)))
B2 <- round(c(rnorm(N/2,20,5),rnorm(N/2,55,5))) ## Les 2 flushs mieux séparés
B2 <- ifelse(B2<1,1,B2)
B2 <- B2[order(B2)]
fB_0 <- data.frame(day=unique(B2),B=as.numeric(table(B2)))
fB_0 <- merge(fB_0,data.frame(day),all=T)
fB_0[is.na(fB_0)] <- 0
fB2 <- fB_0$B
inflos_virt2 <- I_fun(fB2,50)
inflos_virt2_CDE <- I_fun(fB2,16)
### plot des dynamiques d'inflorescences virtuelles :
par(mfrow=c(1,3))
plot(day,fB1, type="h",col="blue",ylab="Nombre de débourrements")
points(day,fB2, type="h",col="red")
plot(day,inflos_virt1, type="l",col="blue",ylab="Nombre d'infloresences (CDEF)")
points(day,inflos_virt2, type="l",col="red")
plot(day,inflos_virt1_CDE, type="l",col="blue",ylab="Nombre d'infloresences (CDE)")
points(day,inflos_virt2_CDE, type="l",col="red")
day <- c(1:80)
### fonction qui calcule le nombre d'inflorescences vivantes et attractive
### avec durée de vie moyenne des inflo mesurée = 29 jours (écart-type = 14)
### avec durée d'attractivité = dA
mu <- 29
sigma <- 14
Fnorm <- cumsum(dnorm(c(1:50),mu,sigma))
I_fun <- function(fB,dA=50) {
nI <- vector(length=length(fB))
nI[1] <- fB[1]
for (t in day[-1]){
temp <- 0
for (j in 1:min(dA,t-1)) {
temp <- temp + fB[t-j]*(1-Fnorm[j])
}
nI[t] <- fB[t] + temp
}
nI
}
### création des dynamiques virtuelles
# B = vecteur des dates de débourrement des inflorescences
# fB = vecteur du nombre d'inflo ayant débourré des jours 1 à 80
# inflos_virt = vecteur du nombre d'inflor vivantes et attractives des jours 1 à 80
# N = nombre de débourrements (pour EH avec modèle FredB N = 7269)
N = 7000
# dynamique pour 1 flush :
B1 <- round(rnorm(N,30,3))
B1 <- ifelse(B1<1,1,B1)
B1 <- B1[order(B1)]
fB_0 <- data.frame(day=unique(B1),B=as.numeric(table(B1)))
fB_0 <- merge(fB_0,data.frame(day),all=T)
fB_0[is.na(fB_0)] <- 0
fB1 <- fB_0$B
inflos_virt1 <- I_fun(fB1,50)
inflos_virt1_CDE <- I_fun(fB1,16)
# dynamique pour 2 flushs :
# B2 <- round(c(rnorm(N/2,20,5),rnorm(N/2,40,5)))
B2 <- round(c(rnorm(N/2,20,5),rnorm(N/2,55,5))) ## Les 2 flushs mieux séparés
B2 <- ifelse(B2<1,1,B2)
B2 <- B2[order(B2)]
fB_0 <- data.frame(day=unique(B2),B=as.numeric(table(B2)))
fB_0 <- merge(fB_0,data.frame(day),all=T)
fB_0[is.na(fB_0)] <- 0
fB2 <- fB_0$B
inflos_virt2 <- I_fun(fB2,50)
inflos_virt2_CDE <- I_fun(fB2,16)
### plot des dynamiques d'inflorescences virtuelles :
par(mfrow=c(1,3))
plot(day,fB1, type="h",col="blue",ylab="Nombre de débourrements")
points(day,fB2, type="h",col="red")
plot(day,inflos_virt1, type="l",col="blue",ylab="Nombre d'infloresences (CDEF)")
points(day,inflos_virt2, type="l",col="red")
plot(day,inflos_virt1_CDE, type="l",col="blue",ylab="Nombre d'infloresences (CDE)")
points(day,inflos_virt2_CDE, type="l",col="red")
