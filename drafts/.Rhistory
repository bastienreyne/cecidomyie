library(mco)
source("../model_R/model_new.R")
source("../model_R/objectif.R")
source("../model_R/plot_res.R")
res100 <- nsga2(obj100, 7, 3,
lower.bounds = c(0, 0, 0, 0, 0, 10900, 1),
upper.bounds = c(0.1, 1, 1, 1, 1, 20300, 10),
popsize = 200, generations = 200)
source('~/cecidomyie/model_R/model_new.R')
source('~/cecidomyie/model_R/model_new.R')
res100 <- nsga2(obj100, 7, 3,
lower.bounds = c(0, 0, 0, 0, 0, 10900, 1),
upper.bounds = c(0.1, 1, 1, 1, 1, 20300, 10),
popsize = 200, generations = 200)
obj100 <- function(x) {
## ER, EH et max endo
larves_estimees <- dynamics(x, rbind(inflos_simulated, matrix(1, nrow = 20, ncol = 3)))
larvesER <- larves_estimees[, 1]
larvesPS <- larves_estimees[, 2]
larvesEH <- larves_estimees[, 3]
larves_est <- matrix(NA, nrow = length(laps), ncol = 3)
for (i in 1:length(laps)) {
indices <- (true_index[i] - laps[i] + 1):true_index[i]
larves_est[i, ] <- c(mean(larvesER[indices]),
mean(larvesPS[indices]),
mean(larvesEH[indices]))
}
larves_observed <- larves[true_index, ]
c(nrmse(larves_est[, 1], larves_observed[, 1], norm = "maxmin"),
nrmse(larves_est[, 3], larves_observed[, 3], norm = "maxmin"),
critere(x, rbind(inflos_simulated, matrix(0, nrow = 5, ncol = 3))))
}
res100 <- nsga2(obj100, 7, 3,
lower.bounds = c(0, 0, 0, 0, 0, 10900, 1),
upper.bounds = c(0.1, 1, 1, 1, 1, 20300, 10),
popsize = 200, generations = 200)
source('~/cecidomyie/model_R/model_new.R')
argument
toto[1:80] == dynamics(c(0.1, 0.433, 0.999, 0.030, 11983, 9.980), inflos_simulated)
dynamics(c(0.1, 0.433, 0.999, 0.030, 11983, 9.980), inflos_smulated)
dynamics(c(0.1, 0.433, 0.999, 0.030, 11983, 9.980), inflos_simulated)
dynamics(c(0.1, 0.433, 0.999, 0.030, 11983, 9.980), inflos_smulated)
dynamics(c(0.1, 0.433, 0.999, 0.030, 11983, 9.980), inflos_simulated)
dynamics(c(0.1, 0.433, 0.999, 0.030, 11983, 9.980), inflos_smulated)
inflos_simulated
inflos
q
dynamics(c(0.1, 0.433, 0.999, 0.030, 11983, 9.98), inflos_simulated)
dynamics(c(0.1, 0.433, 0.999, 0.030, 1, 11983, 9.98), inflos_simulated)
argument
decomposition(argument, inflos_simulated)
decomposition(argument, inflos_simulated)[[1]]
decomposition(argument, inflos_simulated)[[9]]
decomposition(argument, inflos_simulated)[[9]][, 3] %>% sum()
decomposition(argument, inflos_simulated)[[5]][, 3] %>% sum()
decomposition(argument, inflos_simulated)[[5]][8:80, 3] %>% sum()
decomposition(argument, inflos_simulated)[[5]][8:80, 3] %>% sum() * 2
decomposition(argument, inflos_simulated)[[1]][, 3] %>% sum() * 2
decomposition(argument, inflos_simulated)[[1]][, 3] %>% sum()
argument
decomposition(argument, inflos_simulated)[[1]][, 3] %>% sum()
decomposition(argument, inflos_simulated)[[1]][, 1] %>% sum()
decomposition(argument, inflos_simulated)[[1]][, 2] %>% sum()
decomposition(argument, inflos_simulated)[[1]][, 3] %>% sum()
decomposition(argument, inflos_simulated)[[5]][, 1] %>% sum()
decomposition(argument, inflos_simulated)[[5]][8:80, 1] %>% sum()
decomposition(argument, inflos_simulated)[[5]][8:80, 2] %>% sum()
decomposition(argument, inflos_simulated)[[5]][8:80, 1] %>% sum() * 2
decomposition(argument, inflos_simulated)[[6]][8:80, 1] %>% sum() * 2
decomposition(argument, inflos_simulated)[[5]][, 1]
decomposition(argument, inflos_simulated)[[10]][, 1]
decomposition(argument, inflos_simulated)[[6]][, 1]
decomposition(argument, inflos_simulated)[[6]][, 1] %>% sum * 2
decomposition(argument, inflos_simulated)[[9]][, 3] %>% sum * 2
tutu <- exchange(1, inflos_simulated)
tutu[[1]][, 1] + tutu[[2]][, 1] + tutu[[3]][, 1]
tutu[[1]][, 2] + tutu[[2]][, 2] + tutu[[3]][, 2]
tutu[[1]][, 3] + tutu[[2]][, 3] + tutu[[3]][, 3]
inflos <- inflos_simulated
param_migration <- 1
inflos[, 1] / (inflos[, 1] + inflos[, 2] * param_migration +
inflos[, 3] * param_migration^2)
(inflos[, 1] / (inflos[, 1] + inflos[, 2] * param_migration +
inflos[, 3] * param_migration^2)) + (param_migration * inflos[, 2] /
(inflos[, 1] + inflos[, 2] * param_migration + inflos[, 3] * param_migration^2)) + (param_migration^2 * inflos[, 1] /
(inflos[, 3] + inflos[, 2] * param_migration + inflos[, 1] * param_migration^2))
exchange <- function(param_migration, inflos) {
## Échange entre les sous-blocs
## Les matrices alpha représente les individus VENANT dans le sous-bloc
## Par exemple, alphaER[, 3] désigne les individus allant de EH dans ER
alphaER <- alphaPS <- alphaEH <- matrix(0, nrow = nb_jours, ncol = 3)
alphaER[, 1] <- inflos[, 1] / (inflos[, 1] + inflos[, 2] * param_migration +
inflos[, 3] * param_migration^2)
alphaPS[, 2] <- inflos[, 2] / (inflos[, 2] + inflos[, 1] * param_migration +
inflos[, 3] * param_migration)
alphaEH[, 3] <- inflos[, 3] / (inflos[, 3] + inflos[, 2] * param_migration +
inflos[, 1] * param_migration^2)
alphaER[, 2] <- param_migration * inflos[, 1] /
(inflos[, 2] + inflos[, 1] * param_migration + inflos[, 3] * param_migration)
alphaEH[, 2] <- param_migration * inflos[, 3] /
(inflos[, 2] + inflos[, 1] * param_migration + inflos[, 3] * param_migration)
alphaPS[, 1] <- param_migration * inflos[, 2] /
(inflos[, 1] + inflos[, 2] * param_migration + inflos[, 3] * param_migration^2)
alphaPS[, 3] <- param_migration * inflos[, 2] /
(inflos[, 3] + inflos[, 2] * param_migration + inflos[, 1] * param_migration^2)
alphaER[, 3] <- param_migration^2 * inflos[, 3] /
(inflos[, 3] + inflos[, 2] * param_migration + inflos[, 1] * param_migration^2)
alphaEH[, 1] <- param_migration^2 * inflos[, 1] /
(inflos[, 1] + inflos[, 2] * param_migration + inflos[, 3] * param_migration^2)
list(alphaER, alphaPS, alphaEH)
}
plot_decompo(argument, inflos_simulated)
tutu[[1]][, 3] + tutu[[2]][, 3] + tutu[[3]][, 3]
tutu <- exchange(1, inflos_simulated)
tutu[[1]][, 3] + tutu[[2]][, 3] + tutu[[3]][, 3]
tutu[[1]][, 1] + tutu[[2]][, 1] + tutu[[3]][, 1]
exchange <- function(param_migration, inflos) {
## Échange entre les sous-blocs
## Les matrices alpha représente les individus VENANT dans le sous-bloc
## Par exemple, alphaER[, 3] désigne les individus allant de EH dans ER
alphaER <- alphaPS <- alphaEH <- matrix(0, nrow = nb_jours, ncol = 3)
alphaER[, 1] <- inflos[, 1] / (inflos[, 1] + inflos[, 2] * param_migration +
inflos[, 3] * param_migration^2)
alphaPS[, 2] <- inflos[, 2] / (inflos[, 2] + inflos[, 1] * param_migration +
inflos[, 3] * param_migration)
alphaEH[, 3] <- inflos[, 3] / (inflos[, 3] + inflos[, 2] * param_migration +
inflos[, 1] * param_migration^2)
alphaER[, 2] <- param_migration * inflos[, 1] /
(inflos[, 2] + inflos[, 1] * param_migration + inflos[, 3] * param_migration)
alphaEH[, 2] <- param_migration * inflos[, 3] /
(inflos[, 2] + inflos[, 1] * param_migration + inflos[, 3] * param_migration)
alphaPS[, 1] <- param_migration * inflos[, 2] /
(inflos[, 1] + inflos[, 2] * param_migration + inflos[, 3] * param_migration^2)
alphaPS[, 3] <- param_migration * inflos[, 2] /
(inflos[, 3] + inflos[, 2] * param_migration + inflos[, 1] * param_migration^2)
alphaER[, 3] <- param_migration^2 * inflos[, 3] /
(inflos[, 3] + inflos[, 2] * param_migration + inflos[, 1] * param_migration^2)
alphaEH[, 1] <- param_migration^2 * inflos[, 1] /
(inflos[, 1] + inflos[, 2] * param_migration + inflos[, 3] * param_migration^2)
list(alphaER, alphaPS, alphaEH)
}
tutu <- exchange(1, inflos_simulated)
tutu[[1]][, 1] + tutu[[2]][, 1] + tutu[[3]][, 1]
inflos[,1]
inflos[,1]*1^2
exchange <- function(param_migration, inflos) {
## Échange entre les sous-blocs
## Les matrices alpha représente les individus VENANT dans le sous-bloc
## Par exemple, alphaER[, 3] désigne les individus allant de EH dans ER
alphaER <- alphaPS <- alphaEH <- matrix(0, nrow = nb_jours, ncol = 3)
alphaER[, 1] <- inflos[, 1] / (inflos[, 1] + inflos[, 2] * param_migration +
inflos[, 3] * param_migration^2)
alphaPS[, 2] <- inflos[, 2] / (inflos[, 2] + inflos[, 1] * param_migration +
inflos[, 3] * param_migration)
alphaEH[, 3] <- inflos[, 3] / (inflos[, 3] + inflos[, 2] * param_migration +
inflos[, 1] * param_migration^2)
alphaER[, 2] <- param_migration * inflos[, 1] /
(inflos[, 2] + inflos[, 1] * param_migration + inflos[, 3] * param_migration)
alphaEH[, 2] <- param_migration * inflos[, 3] /
(inflos[, 2] + inflos[, 1] * param_migration + inflos[, 3] * param_migration)
alphaPS[, 1] <- param_migration * inflos[, 2] /
(inflos[, 1] + inflos[, 2] * param_migration + inflos[, 3] * param_migration^2)
alphaPS[, 3] <- param_migration * inflos[, 2] /
(inflos[, 3] + inflos[, 2] * param_migration + inflos[, 1] * param_migration^2)
alphaER[, 3] <- param_migration^2 * inflos[, 1] /
(inflos[, 3] + inflos[, 2] * param_migration + inflos[, 1] * param_migration^2)
alphaEH[, 1] <- param_migration^2 * inflos[, 3] /
(inflos[, 1] + inflos[, 2] * param_migration + inflos[, 3] * param_migration^2)
list(alphaER, alphaPS, alphaEH)
}
tutu <- exchange(1, inflos_simulated)
tutu[[1]][, 1] + tutu[[2]][, 1] + tutu[[3]][, 1]
tutu[[1]][, 3] + tutu[[2]][, 3] + tutu[[3]][, 3]
plot_decompo(argument, inflos_simulated)
decomposition(argument, inflos_simulated)[[9]][, 3]
decomposition(argument, inflos_simulated)[[9]][, 3] %>% sum * 2
decomposition(argument, inflos_simulated)[[1]][, 3] %>% sum
decomposition(argument, inflos_simulated)[[1]][, 2] %>% sum
decomposition(argument, inflos_simulated)[[1]][, 1] %>% sum
decomposition(argument, inflos_simulated)[[1]][, 3] %>% sum
decomposition(argument, inflos_simulated)[[1]][, 3]
plot_dynamics(argument, inflos_simulated)
source('~/cecidomyie/model_R/model_new.R')
plot_dynamics(argument, inflos_simulated)
dynamics(argument, inflos_simulated)[, 3]
source('~/cecidomyie/model_R/model_new.R')
dynamics(argument, inflos_simulated)[, 3]
plot_dynamics(argument, inflos_simulated)
rm(list =ls())
source('~/cecidomyie/model_R/model_new.R')
source('~/cecidomyie/model_R/plot_res.R')
source('~/cecidomyie/model_R/plot_res.R')
plot_dynamics(argument, inflos_simulated)
source('~/cecidomyie/model_R/plot_res.R')
plot_dynamics(argument, inflos_simulated)
argument <- c(0.024, 1, 0.950, 0.041, 0.081, 20064, 9.983)
plot_dynamics(argument, inflos_simulated)
inflos_simulated <- as.matrix(read.csv("/home/bastien/cecidomyie/data/attractive_simulated.csv")[, 3:5])
plot_dynamics(argument, inflos_simulated)
library(tidyverse)
library(magrittr)
library(mco)
library(hydroGOF)
source("/home/bastien/cecidomyie/model_R/model.R")
source("/home/bastien/cecidomyie/model_R/model_diapause.R")
source("/home/bastien/cecidomyie/model_R/model_new.R")
load("/home/bastien/cecidomyie/data/date2017.Rdata")
laps <- c(7, 7, 7, 8, 2, 5, 2, 4, 3, 5, 2, 5, 2, 5, 2, 4, 3, 4, 3)
true_index <- which(date2017 %in% true_date2017)
inflos_simulated <- as.matrix(read.csv("/home/bastien/cecidomyie/data/attractive_simulated.csv")[, 3:5])
data_piege <- read.csv("/home/bastien/cecidomyie/data/2017_piege.csv")
larves1 <- data_piege %>% filter(Sol == "ER") %>% pull(larves)
larves2 <- data_piege %>% filter(Sol == "PS") %>% pull(larves)
larves3 <- data_piege %>% filter(Sol == "EH") %>% pull(larves)
larves <- cbind(larves1, larves2, larves3)
plot_dynamics(argument, inflos_simulated)
plot_decompo(argument, inflos_simulated)
plot_decompo <- function(args, inflos) {
obs <- larves_obs
estimations <- decomposition(args, inflos)
ploter <- data.frame(Date = date2017,
Sol = factor("Enherbement ras", levels = c("Enherbement ras",
"Paillage synthétique",
"Enherbement haut")),
Observation = obs[, 1],
Estimation = estimations[[1]][, 1],
Pupaison = estimations[[2]][, 1],
Diapause = estimations[[3]][, 1],
Voisinage = estimations[[4]][, 1],
Exogène = estimations[[5]][, 1]) %>%
gather(Exogène, Voisinage, Diapause, Pupaison,
key = prov, value = prop, factor_key = TRUE)
plotps <- data.frame(Date = date2017,
Sol = factor("Paillage synthétique", levels = c("Enherbement ras",
"Paillage synthétique",
"Enherbement haut")),
Observation = obs[, 2],
Estimation = estimations[[1]][, 2],
Pupaison = estimations[[2]][, 2],
Diapause = estimations[[3]][, 2],
Voisinage = estimations[[4]][, 2],
Exogène = estimations[[5]][, 2]) %>%
gather(Exogène, Voisinage, Diapause, Pupaison,
key = prov, value = prop, factor_key = TRUE)
ploteh <- data.frame(Date = date2017,
Sol = factor("Enherbement haut", levels = c("Enherbement ras",
"Paillage synthétique",
"Enherbement haut")),
Observation = obs[, 3],
Estimation = estimations[[1]][, 3],
Pupaison = estimations[[2]][, 3],
Diapause = estimations[[3]][, 3],
Voisinage = estimations[[4]][, 3],
Exogène = estimations[[5]][, 3]) %>%
gather(Exogène, Voisinage, Diapause, Pupaison,
key = prov, value = prop, factor_key = TRUE)
to_plot <- bind_rows(ploter, plotps, ploteh)
to_plot %>% ggplot +
aes(x = Date) +
geom_area(aes(y = prop, fill = prov), alpha = 0.5) +
geom_line(aes(y = Observation, color = "Observation"), lwd = 0.75) +
geom_line(aes(y = Estimation, color = "Estimation"), lwd = 0.75) +
geom_point(aes(y = Observation, color = "Observation")) +
geom_point(aes(y = Estimation, color = "Estimation")) +
theme_bw() +
facet_grid(. ~ Sol) +
theme(legend.title = element_blank(), legend.position = "bottom") +
scale_color_manual(values = c("green4", "black")) +
ylab("Nombre de larves")
}
plot_decompo(argument, inflos_simulated)
ggsave("REF.eps", device = cairo_ps)
decomposition(argument, inflos_simulated)
decomposition(argument, inflos_simulated)[[1]][, 1] %>% sum()
decomposition(argument, inflos_simulated)[[1]][, 2] %>% sum()
decomposition(argument, inflos_simulated)[[1]][, 3] %>% sum()
decomposition(argument, inflos_simulated)[[6]][, 1] %>% sum()
decomposition(argument, inflos_simulated)[[6]][, 1] %>% sum() * 2
decomposition(argument, inflos_simulated)[[6]][, 2] %>% sum() * 2
decomposition(argument, inflos_simulated)[[6]][, 3] %>% sum() * 2
decomposition(argument, inflos_simulated)[[7]][, 3] %>% sum() * 2
decomposition(argument, inflos_simulated)[[7]][, 2] %>% sum() * 2
decomposition(argument, inflos_simulated)[[7]][, 1] %>% sum() * 2
decomposition(argument, inflos_simulated)[[8]][, 1] %>% sum() * 2
decomposition(argument, inflos_simulated)[[8]][, 2] %>% sum() * 2
decomposition(argument, inflos_simulated)[[8]][, 3] %>% sum() * 2
decomposition(argument, inflos_simulated)[[9]][, 1] %>% sum() * 2
decomposition(argument, inflos_simulated)[[9]][, 2] %>% sum() * 2
decomposition(argument, inflos_simulated)[[9]][, 3] %>% sum() * 2
decomposition(argument, inflos_simulated)[[10]][, 3] %>% sum() * 2
decomposition(argument, inflos_simulated)[[10]][, 1] %>% sum() * 2
decomposition(argument, inflos_simulated)[[10]][, 2] %>% sum() * 2
source('~/Téléchargements/Untitled1_floraison simulée.R')
source('~/Téléchargements/Untitled1_floraison simulée.R')
source('~/Téléchargements/Untitled1_floraison simulée.R')
day <- c(1:300)
nI <- vector(length=300)
# B = vecteur des dates de d?bourrement de 1000 inflorescences
B <- round(c(rnorm(800,70,20),rnorm(200,150,30)))
B <- ifelse(B<1,1,B)
B <- B[order(B)]
summary(B)
# fB = vecteur du nombre d'inflorescence ayant d?bourr? des jours 1 ? 300
fB0 <- data.frame(day=unique(B),B=as.numeric(table(B)))
fB0 <- merge(fB0,data.frame(day),all=T)
fB0[is.na(fB0)] <- 0
fB <- fB0$B
par(mfrow = c(1,1))
day <- c(1:300)
nI <- vector(length=300)
# B = vecteur des dates de d?bourrement de 1000 inflorescences
B <- round(c(rnorm(800,70,20),rnorm(200,150,30)))
B <- ifelse(B<1,1,B)
B <- B[order(B)]
summary(B)
# fB = vecteur du nombre d'inflorescence ayant d?bourr? des jours 1 ? 300
fB0 <- data.frame(day=unique(B),B=as.numeric(table(B)))
fB0 <- merge(fB0,data.frame(day),all=T)
fB0[is.na(fB0)] <- 0
fB <- fB0$B
day <- c(1:81)
nI <- vector(length=81)
obs <- c(142, 181, 219, 258, 297, 336, 374, 413, 428, 443, 458, 474, 489, 504, 519, 542, 564, 587, 610, 633, 655, 678, 655, 632, 610, 587, 564, 542, 519, 496, 770, 1044, 1033, 1023, 1012, 1002, 991, 947, 903, 1154, 1404, 1655, 1906, 2199, 2492, 2785, 2921, 3056, 3192, 3327, 3463, 4044, 4626, 4901, 5176, 5450, 5725, 6000, 5547, 5094, 5143, 5192, 5242, 5291, 5340, 4886, 4431, 4589, 4746, 4904, 5062, 4563, 4063, 3564, 3291, 3018, 2745, 2472, 2170, 1869, 1567)
fB <- c(141.92294040705966, 186.6334908441623, 43.34381485506992, 42.07675543819867, 42.08353367877285, 42.59466012482839, 38.14798638252914, 15.554169018743577, 43.141230774750504, 46.574374342611065, 12.307367537356853, 11.465928073257686, 11.472914824995875, 7.781986327928723, 6.730357659949773, 51.09809483341888, 53.40147639509346, 11.532798078224012, 8.189628979044484, 5.1532628275685, 1.7087423799955634, 49.00979644940681, 7.412255116620066, 6.78239321165833, 0.0, 0.0, 0.0, 1.5054870789610768, 6.952216774570742, 9.394363880094566, 306.8546986120198, 237.42503956754135, 14.535226189198639, 12.890098289770728, 12.487482083631168, 12.288918012098904, 0.0, 0.0, 0.0, 260.4118492204183, 284.0479672185972, 287.2643050242877, 289.4278534151775, 332.90277617478824, 336.1498723067778, 338.59770618885665, 184.18936600337173, 181.84038476272488, 185.86982863689312, 187.0435632348303, 190.84987165652052, 651.3787253893967, 654.6425239996113, 352.19111580333356, 351.03593681660874, 354.3358607054422, 317.41054007573774, 0.0, 0.0, 0.0, 0.0, 0.0, 31.287990892577785, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
fB <- round(fB)
B <- rep(day,fB)
## 0/ Dynamiques de d?bourrement des inflorescences (instantann?es et cumul?es)
#-------------------------------------------------------------------------------
plot(day, fB, type="h", main="B(t)")
plot(day, cumsum(fB), type="l", main="cumsum B(t)")
## 0/ Dynamique de survie d'une inflorescence selon son ?ge
#-------------------------------------------------------------------------------
# dur?e de vie moyenne des inflorescences mesur?es = 29 jours (?cart-type = 14)
mu <- 29
sigma <- 14
Fnorm <- cumsum(dnorm(c(1:50),mu,sigma))
age=c(1:50)
plot(age,1-Fnorm, ylim=c(0,1), type="l", main="Probabilité de survie")
abline(h=1,lty=3)
I_fun0 <- function(dA=50) {
dateM <- B + dA
for (i in day){
nI[i] <- length(which(B<=i & i<dateM))
}
nI
}
plot(NA, NA, xlim=range(day), ylim=c(0,max(cumsum(fB))), xlab="day", ylab="I",
main = "Inflorescences I(t) - sans mortalit?")
points(day, I_fun0(50), type="l", col=1)
points(day, I_fun0(33), type="l", col=2)
points(day, I_fun0(16), type="l", col=3)
legend("topleft", lty=1, col=c(1,2,3), legend=c("50j","33j","16j"))
# avec normalisation de nI par max(nI)
plot(NA, NA, xlim=range(day), ylim=c(0,1), xlab="day", ylab="I / max(I)",
main = "Inflorescences I(t) - sans mortalit?")
points(day, I_fun0(50)/max(I_fun0(50)), type="l", col=1)
points(day, I_fun0(33)/max(I_fun0(33)), type="l", col=2)
points(day, I_fun0(16)/max(I_fun0(16)), type="l", col=3)
legend("topleft", lty=1, col=c(1,2,3), legend=c("50j","33j","16j"))
# m?thode 1: dur?e de vie fix?e ? contante mu
I_fun1 <- function(dA=50) {
duree <- min(mu,dA)
dateM <- B + duree
for (i in day){
nI[i] <- length(which(B<=i & i<dateM))
}
nI
}
# m?thode 2: dur?e de vie fix?e par CDF(mu,sigma)
I_fun2 <- function(dA=50) {
nI[1] <- fB[1]
for (t in day[-1]){
temp <- 0
for (j in 1:min(dA,t-1)) {
temp <- temp + fB[t-j]*(1-Fnorm[j])
}
nI[t] <- fB[t] + temp
}
nI
}
# m?thode 3: dur?e de vie fix?e par rnorm(mu,sigma)
I_fun3 <- function(dA=50) {
duree <- round(rnorm(length(B),mu,sigma))
duree <- ifelse(duree<0,0,duree)
duree <- ifelse(duree>dA,dA,duree)
summary(duree)
table(duree)
dateM <- B + duree
for (i in day){
nI[i] <- length(which(B<=i & i<dateM)) }
nI
}
plot(NA, NA, xlim=range(day), ylim=c(0,max(cumsum(fB))), xlab="day", ylab="I",
main = "Inflorescences I(t) / C-D-E-F (50j)")
points(day, obs, type="b", col=gray(0.5))
points(day, I_fun1(50), type="l", col=1, lwd=2)
points(day, I_fun2(50), type="l", col=2, lwd=2)
points(day, I_fun3(50), type="l", col=3, lwd=2)
legend("topleft",lty=1,col=c(1,2,3),legend=c("mu","CDF_mu","rnorm_mu"),title="Mortalit?")
plot(NA, NA, xlim=range(day), ylim=c(0,max(cumsum(fB))), xlab="day", ylab="I",
main = "Inflorescences I(t) / C-D-E-F/2 (33j)")
points(day, obs, type="b", col=gray(0.5))
points(day, I_fun1(33), type="l", col=1, lwd=2)
points(day, I_fun2(33), type="l", col=2, lwd=2)
points(day, I_fun3(33), type="l", col=3, lwd=2)
legend("topleft",lty=1,col=c(1,2,3),legend=c("mu","CDF_mu","rnorm_mu"),title="Mortalit?")
plot(NA, NA, xlim=range(day), ylim=c(0,max(cumsum(fB))), xlab="day", ylab="I",
main = "Inflorescences I(t) / C-D-E (16j)")
points(day, obs, type="b", col=gray(0.5))
points(day, I_fun1(16), type="l", col=1, lwd=2)
points(day, I_fun2(16), type="l", col=2, lwd=2)
points(day, I_fun3(16), type="l", col=3, lwd=2)
legend("topleft",lty=1,col=c(1,2,3),legend=c("mu","CDF_mu","rnorm_mu"),title="Mortalit?")
### Dynamique 2_a - dur?e de vie fix?e ? mu
dateM <- B + mu
for (i in day){
nI[i] <- length(which(B<=i & i<dateM)) }
plot(day,nI,ylim=c(0,max(cumsum(fB))),type="l",col=1,main=paste("mu=",mu," , sigma=", sigma))
### Dynamique 2_b - dur?e de vie fix?e par CDF(mu,sigma)
nI[1] <- fB[1]
for (t in day[-1]){
temp <- 0
for (j in 1:min(50,t-1)) {
temp <- temp + fB[t-j]*(1-Fnorm[j])
}
nI[t] <- fB[t] + temp
}
points(day,nI,type="l",col=2)
### Dynamique 2_c - dur?e de vie fix?e par rnorm(mu,sigma)
duree <- round(rnorm(length(B),mu,sigma))
duree <- ifelse(duree<0,0,duree)
duree <- ifelse(duree>50,50,duree)
summary(duree)
table(duree)
dateM <- B + duree
for (i in day){
nI[i] <- length(which(B<=i & i<dateM)) }
points(day,nI,type="l",col=3)
legend("topleft",lty=1,col=c(1,2,3),legend=c("mu","CDF","rnorm"))
points(day,obs,type="b")
# m?thode 2: dur?e de vie fix?e par CDF(mu,sigma)
I_fun2 <- function(dA=50) {
nI[1] <- fB[1]
for (t in day[-1]){
temp <- 0
for (j in 1:min(dA,t-1)) {
temp <- temp + fB[t-j]*(1-Fnorm[j])
}
nI[t] <- fB[t] + temp
}
nI
}
plot(NA, NA, xlim=range(day), ylim=c(0,max(cumsum(fB))), xlab="day", ylab="I",
main = "Inflorescences I(t) / C-D-E-F (50j)")
points(day, obs, type="b", col=gray(0.5))
points(day, I_fun1(50), type="l", col=1, lwd=2)
points(day, I_fun2(50), type="l", col=2, lwd=2)
points(day, I_fun3(50), type="l", col=3, lwd=2)
## 0/ Dynamiques de d?bourrement des inflorescences (instantann?es et cumul?es)
#-------------------------------------------------------------------------------
plot(day, fB, type="h", main="B(t)")
plot(NA, NA, xlim=range(day), ylim=c(0,max(cumsum(fB))), xlab="day", ylab="I",
main = "Inflorescences I(t) / C-D-E-F (50j)")
points(day, obs, type="b", col=gray(0.5))
points(day, I_fun1(50), type="l", col=1, lwd=2)
points(day, I_fun2(50), type="l", col=2, lwd=2)
points(day, I_fun3(50), type="l", col=3, lwd=2)
legend("topleft",lty=1,col=c(1,2,3),legend=c("mu","CDF_mu","rnorm_mu"),title="Mortalit?")
plot(NA, NA, xlim=range(day), ylim=c(0,max(cumsum(fB))), xlab="day", ylab="I",
main = "Inflorescences I(t) / C-D-E-F/2 (33j)")
points(day, obs, type="b", col=gray(0.5))
points(day, I_fun1(33), type="l", col=1, lwd=2)
points(day, I_fun2(33), type="l", col=2, lwd=2)
points(day, I_fun3(33), type="l", col=3, lwd=2)
legend("topleft",lty=1,col=c(1,2,3),legend=c("mu","CDF_mu","rnorm_mu"),title="Mortalit?")
plot(NA, NA, xlim=range(day), ylim=c(0,max(cumsum(fB))), xlab="day", ylab="I",
main = "Inflorescences I(t) / C-D-E (16j)")
points(day, obs, type="b", col=gray(0.5))
points(day, I_fun1(16), type="l", col=1, lwd=2)
points(day, I_fun2(16), type="l", col=2, lwd=2)
points(day, I_fun3(16), type="l", col=3, lwd=2)
legend("topleft",lty=1,col=c(1,2,3),legend=c("mu","CDF_mu","rnorm_mu"),title="Mortalit?")
dateM <- B + mu
for (i in day){
nI[i] <- length(which(B<=i & i<dateM)) }
plot(day,nI,ylim=c(0,max(cumsum(fB))),type="l",col=1,main=paste("mu=",mu," , sigma=", sigma))
nI[1] <- fB[1]
for (t in day[-1]){
temp <- 0
for (j in 1:min(50,t-1)) {
temp <- temp + fB[t-j]*(1-Fnorm[j])
}
nI[t] <- fB[t] + temp
}
points(day,nI,type="l",col=2)
### Dynamique 2_c - dur?e de vie fix?e par rnorm(mu,sigma)
duree <- round(rnorm(length(B),mu,sigma))
duree <- ifelse(duree<0,0,duree)
duree <- ifelse(duree>50,50,duree)
summary(duree)
table(duree)
dateM <- B + duree
for (i in day){
nI[i] <- length(which(B<=i & i<dateM)) }
points(day,nI,type="l",col=3)
legend("topleft",lty=1,col=c(1,2,3),legend=c("mu","CDF","rnorm"))
points(day,obs,type="b")
plot(NA, NA, xlim=range(day), ylim=c(0,max(cumsum(fB))), xlab="day", ylab="I",
main = "Inflorescences I(t) / C-D-E-F (50j)")
points(day, I_fun2(50), type="l", col=2, lwd=2)
points(day, I_fun2(33), type="l", col=4, lwd=2)
points(day, I_fun2(16), type="l", col=5, lwd=2)
